//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/XRVelocityActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRVelocityActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRVelocityActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRVelocityActions"",
    ""maps"": [
        {
            ""name"": ""Velocity"",
            ""id"": ""2664998e-8f94-483d-b8d3-2e21085d8981"",
            ""actions"": [
                {
                    ""name"": ""Left Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""b3e50ab2-208c-4e89-8572-f00e327b8336"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Right Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""38517c45-7e35-4812-95d0-8158c08c6f62"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42f60c4c-e39a-4a96-91ea-a6df0d285b91"",
                    ""path"": ""<OculusTouchController>{LeftHand}/devicePose/velocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f00460ef-7c6a-4cb7-bb5a-a368236dcd6f"",
                    ""path"": ""<OculusTouchController>{RightHand}/devicePose/velocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Velocity
        m_Velocity = asset.FindActionMap("Velocity", throwIfNotFound: true);
        m_Velocity_LeftVelocity = m_Velocity.FindAction("Left Velocity", throwIfNotFound: true);
        m_Velocity_RightVelocity = m_Velocity.FindAction("Right Velocity", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Velocity
    private readonly InputActionMap m_Velocity;
    private List<IVelocityActions> m_VelocityActionsCallbackInterfaces = new List<IVelocityActions>();
    private readonly InputAction m_Velocity_LeftVelocity;
    private readonly InputAction m_Velocity_RightVelocity;
    public struct VelocityActions
    {
        private @XRVelocityActions m_Wrapper;
        public VelocityActions(@XRVelocityActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftVelocity => m_Wrapper.m_Velocity_LeftVelocity;
        public InputAction @RightVelocity => m_Wrapper.m_Velocity_RightVelocity;
        public InputActionMap Get() { return m_Wrapper.m_Velocity; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VelocityActions set) { return set.Get(); }
        public void AddCallbacks(IVelocityActions instance)
        {
            if (instance == null || m_Wrapper.m_VelocityActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VelocityActionsCallbackInterfaces.Add(instance);
            @LeftVelocity.started += instance.OnLeftVelocity;
            @LeftVelocity.performed += instance.OnLeftVelocity;
            @LeftVelocity.canceled += instance.OnLeftVelocity;
            @RightVelocity.started += instance.OnRightVelocity;
            @RightVelocity.performed += instance.OnRightVelocity;
            @RightVelocity.canceled += instance.OnRightVelocity;
        }

        private void UnregisterCallbacks(IVelocityActions instance)
        {
            @LeftVelocity.started -= instance.OnLeftVelocity;
            @LeftVelocity.performed -= instance.OnLeftVelocity;
            @LeftVelocity.canceled -= instance.OnLeftVelocity;
            @RightVelocity.started -= instance.OnRightVelocity;
            @RightVelocity.performed -= instance.OnRightVelocity;
            @RightVelocity.canceled -= instance.OnRightVelocity;
        }

        public void RemoveCallbacks(IVelocityActions instance)
        {
            if (m_Wrapper.m_VelocityActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVelocityActions instance)
        {
            foreach (var item in m_Wrapper.m_VelocityActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VelocityActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VelocityActions @Velocity => new VelocityActions(this);
    public interface IVelocityActions
    {
        void OnLeftVelocity(InputAction.CallbackContext context);
        void OnRightVelocity(InputAction.CallbackContext context);
    }
}
